# Create an R file
usethis::use_r("mcwm")
# Load
devtools::load_all(".")
devtools::document()
# Load
devtools::load_all(".")
devtools::document()
usethis::use_package_doc()
devtools::load_all()
usethis::use_r("runMultiCwm")
# Load
devtools::load_all(".")
# Load
devtools::load_all(".")
# Set the number of column of X and fix G
d <- 2; G <- 2; ni <- 1; c <- 3-1;
# create an empty list
w <- sigma <- list()
mean <- matrix(c(.1,-2,2,0), nrow = G, ncol = d)
for(l in 1:G) {sigma[[l]] <- diag(d)}
weights1 <- matrix(c(5,.4,.3,0.04), nrow = d, ncol = c); w[[1]] <- t(weights1)
weights2 <- matrix(c(.01,.02,2,1), nrow = d, ncol = c);  w[[2]] <- t(weights2)
# Set a seed
set.seed(20);
mean
weight1
w
Pi
# Load
devtools::load_all(".")
Pi
simData(n = 500, G = 3, d = 2, J = 3, mean, sigma, w, Pi)
n
is.integer(500)
is.numeric(500)
is.numeric(500.33)
# Load
devtools::load_all(".")
simData(n = 500, G = 3, d = 2, J = 3, mean, sigma, w, Pi)
!is.integer(round(n))
!is.integer(round(500))
is.integer(round(500))
is.integer(500)
is.integer(round(500))
500 == round(500)
round(500)
# Load
devtools::load_all(".")
simData(n = 500, G = 3, d = 2, J = 3, mean, sigma, w, Pi)
Pi
round(500.033)
50.3 %% 1 == 0
50 %% 1 == 0
50.44 %% 1 == 0
# Load
devtools::load_all(".")
simData(n = 500, G = 3, d = 2, J = 3, mean, sigma, w)
G
simData(n = 500, G = 2, d = 2, J = 3, mean, sigma, w)
simulation <- simData(n=500, G = 2, d=2, J=3, mean, sigma, w, Pi)
simulation <- simData(n = 500, G = 2, d = 2, J = 3, mean, sigma, w)
Y <- simulation$Y; x <- simulation$x; z <- simulation$z
Y
x
z
da <- data.frame(Y, x)
names(da) <- c("a", "b", "c", "x1", 'x2')
plot(x, col = z, pch = "*")
Y1 <- Y[which(z == 1),];Y2 <- Y[which(z == 2),];#Y3 <- Y[pos3,]
colSums(Y1);colSums(Y2)#;colSums(Y3)
table(z)
ggplot(da, aes(x = x1, y = x2)) +
geom_point(color = as.factor(z), size = 1) +
geom_density_2d(alpha=0.5, color = "black")
Fe <- multiCWM::MultiCwm(Y, x, G = 2, init = "kmeans", maxit = 1000, tol = 1e-5, show_table = T)
simulation <- simData(n = 500.4, G = 2, d = 2, J = 3, mean, sigma, w)
simulation <- simData(n = 50.10, G = 2, d = 2, J = 3, mean, sigma, w)
# Load
devtools::load_all(".")
usethis::use_agpl3_license()
devtools::document()
##################### K = 2
?simData
##################### K = 2
?MultiCwm
# Load
devtools::load_all(".")
devtools::document()
##################### K = 2
?MultiCwm
Fe <- multiCWM::MultiCwm(Y, x, G = 2, init = "kmeans", maxit = 1000, tol = 1e-5, show_table = T)
# require("markdown");require("rattle");require("xtable");require("stringr")
# require("fBasics");require("MASS");require("survival");#require("STAR")
# require("gamlss.dist");require("VGAM");library(rgl);library(ellipse)
# library(threejs);library(plotROC);library(ROCR);library(pROC)
# library(rgl)
#
# library(tidyverse);library(Rlab)
# library(coda);library(VGAM)
# library(mvnfast); library(fastDummies)
# library(Rtsne)
?kable
# Load
devtools::load_all(".")
Fe <- multiCWM::MultiCwm(Y, x, G = 2, init = "kmeans", maxit = 1000, tol = 1e-5, show_table = T)
# Get Estimates
Fe_2$Prob; Fe_2$weights; Fe_2$mean; Fe_2$sigma;
# Get Estimates
Fe$Prob; Fe$weights; Fe$mean; Fe$sigma;
Fe$sigma
install.packages("RcppDE")
Fe_1 <- multiCWM::MultiCwm(Y, x, G = 1, init = "mclust", maxit = 1000, tol = 1e-5, show_table = T)
# Get Estimates
Fe$Prob; Fe$weights; Fe$mean; Fe$sigma;
# Load
devtools::load_all(".")
Fe_1 <- multiCWM::MultiCwm(Y, x, G = 1, init = "mclust", maxit = 1000, tol = 1e-5, show_table = T)
?to_categorical
# Load
devtools::load_all(".")
Fe <- multiCWM::MultiCwm(Y, x, G = 2, init = "kmeans", maxit = 1000, tol = 1e-5, show_table = T)
Fr <- multiCWM::MultiCwm(Y, x, G = 2, init = "random", maxit = 1000, tol = 1e-5, show_table = T)
Fm <- multiCWM::MultiCwm(Y, x, G = 2, init = "mclust", maxit = 1000, tol = 1e-5, show_table = T)
mclust::Mclust(x)
library(mclust)
Mclust(x)
mclust::mclustBIC(x)
detach("package:mclust", unload = TRUE)
# Load
devtools::load_all(".")
Fm <- multiCWM::MultiCwm(Y, x, G = 2, init = "mclust", maxit = 1000, tol = 1e-5, show_table = T)
# Get Estimates
Fe$Prob; Fe$weights; Fe$mean; Fe$sigma;
# Get Estimates
Fm$Prob; Fe$weights; Fe$mean; Fe$sigma;
# Get Estimates
Fm$Prob; Fm$weights; Fm$mean; Fm$sigma;
